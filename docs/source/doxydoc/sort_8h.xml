<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="sort_8h" kind="file" language="C++">
    <compoundname>sort.h</compoundname>
    <includes local="no">numeric</includes>
    <includes local="no">algorithm</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/nico/Code/DNetPRO/include/sort.h</label>
        <link refid="sort_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>numeric</label>
      </node>
      <node id="3">
        <label>algorithm</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="sort_8h_1adb4c8ff5e303eab95fe57c3c34345ead" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename type</type>
          </param>
          <param>
            <type>typename lambda</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mergeargsort_serial</definition>
        <argsstring>(int *index, type *arr, const int &amp;start, const int &amp;end, lambda order)</argsstring>
        <name>mergeargsort_serial</name>
        <param>
          <type>int *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>type *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>end</declname>
        </param>
        <param>
          <type>lambda</type>
          <declname>order</declname>
        </param>
        <briefdescription>
<para>Mergesort of the indexes serial. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is the serial version of the sorting using indexes. The original array is unchanged at the end of the function but the indexes for its reordering are evaluated and stored into the <computeroutput>indexes</computeroutput> variable. See numpy.argsort in Python as analogy.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lambda</parametername>
</parameternamelist>
<parameterdescription>
<para>Function for the comparison evaluation</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of indexes (it must have the same size of <computeroutput>arr</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arr</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of values to reorder </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting point for the reordering (commonly set to <computeroutput>0</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>End point for the reordering (commonly set to <computeroutput>array_size</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>Lambda function for the comparison evaluation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/DNetPRO/include/sort.h" line="29" column="6" declfile="/home/nico/Code/DNetPRO/include/sort.h" declline="29" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sort_8h_1a9a7fc87f1ba9640bb7d4e271c4947325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename type</type>
          </param>
          <param>
            <type>typename lambda</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mergeargsort_parallel_omp</definition>
        <argsstring>(int *index, type *arr, const int &amp;start, const int &amp;end, const int &amp;threads, lambda order)</argsstring>
        <name>mergeargsort_parallel_omp</name>
        <param>
          <type>int *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>type *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>threads</declname>
        </param>
        <param>
          <type>lambda</type>
          <declname>order</declname>
        </param>
        <briefdescription>
<para>Mergesort of the indexes with OMP multithreading support. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is the parallel version of the sorting using indexes. The original array is unchanged at the end of the function but the indexes for its reordering are evaluated and stored into the <computeroutput>indexes</computeroutput> variable. See numpy.argsort in Python as analogy.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lambda</parametername>
</parameternamelist>
<parameterdescription>
<para>Function for the comparison evaluation</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of indexes (it must have the same size of <computeroutput>arr</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arr</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of values to reorder </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting point for the reordering (commonly set to <computeroutput>0</computeroutput>, but it is used for the parallelization master-slave) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>End point for the reordering (commonly set to <computeroutput>array_size</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threads</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of threads to use in the evaluation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>Lambda function for the comparison evaluation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Code/DNetPRO/include/sort.h" line="52" column="6" declfile="/home/nico/Code/DNetPRO/include/sort.h" declline="52" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__sort_h__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__sort_h__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>lambda<sp/>&gt;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sort_8h_1adb4c8ff5e303eab95fe57c3c34345ead" kindref="member">mergeargsort_serial</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>index,<sp/>type<sp/>*<sp/>arr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>end,<sp/>lambda<sp/>order);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>lambda<sp/>&gt;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sort_8h_1a9a7fc87f1ba9640bb7d4e271c4947325" kindref="member">mergeargsort_parallel_omp</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>index,<sp/>type<sp/>*<sp/>arr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>threads,<sp/>lambda<sp/>order);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>__sort_h__</highlight></codeline>
    </programlisting>
    <location file="/home/nico/Code/DNetPRO/include/sort.h"/>
  </compounddef>
</doxygen>
